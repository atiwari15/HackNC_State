import cv2
import dlib
import time
from scipy.spatial import distance



# Load dlib's face detector and facial landmark predictor
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')

# Define eye landmarks
LEFT_EYE = [36, 37, 38, 39, 40, 41]
RIGHT_EYE = [42, 43, 44, 45, 46, 47]

# Define Morse code dictionary
MORSE_CODE_DICT = {
    ".-": "A", "-...": "B", "-.-.": "C", "-..": "D", ".": "E",
    "..-.": "F", "--.": "G", "....": "H", "..": "I", ".---": "J",
    "-.-": "K", ".-..": "L", "--": "M", "-.": "N", "---": "O",
    ".--.": "P", "--.-": "Q", ".-.": "R", "...": "S", "-": "T",
    "..-": "U", "...-": "V", ".--": "W", "-..-": "X", "-.--": "Y",
    "--..": "Z", " ": " "
}

# Function to calculate Eye Aspect Ratio (EAR)
def calculate_ear(eye):
    A = distance.euclidean(eye[1], eye[5])
    B = distance.euclidean(eye[2], eye[4])
    C = distance.euclidean(eye[0], eye[3])
    return (A + B) / (2.0 * C)

# Blink detection thresholds
EAR_THRESHOLD = 0.22
DOT_THRESHOLD = 0.3 # Blinks shorter than this are dots
LETTER_PAUSE = 2.0  # Time between blinks to count as a new letter
WORD_PAUSE = 5.0  # Time between blinks to count as a new word

# Variables for blink timing
blink_counter = 0
blink_start_time = None
morse_code_sequence = []
decoded_message = ""

# Start video capture
camera = cv2.VideoCapture(0)

while True:
    ret, frame = camera.read()
    if not ret:
        break

    # Convert to grayscale
    frame = cv2.flip(frame, 1)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = detector(gray)

    for face in faces:
        landmarks = predictor(gray, face)

        # Get eye coordinates
        left_eye = [(landmarks.part(n).x, landmarks.part(n).y) for n in LEFT_EYE]
        right_eye = [(landmarks.part(n).x, landmarks.part(n).y) for n in RIGHT_EYE]

        # Compute EAR
        left_ear = calculate_ear(left_eye)
        right_ear = calculate_ear(right_eye)
        avg_ear = (left_ear + right_ear) / 2.0

        # Draw eye landmarks
        for point in left_eye + right_eye:
            cv2.circle(frame, point, 2, (0, 255, 0), -1)

        # Blink detection logic
        if avg_ear < EAR_THRESHOLD:
            if blink_start_time is None:  # Blink start
                blink_start_time = time.time()
        else:
            if blink_start_time is not None:  # Blink end
                blink_duration = time.time() - blink_start_time
                blink_start_time = None  # Reset for next blink

                # Determine if blink is a dot or dash
                if blink_duration < DOT_THRESHOLD:
                    morse_code_sequence.append(".")
                else:
                    morse_code_sequence.append("-")

                print("Current Morse Code:", "".join(morse_code_sequence))

                # Pause detection for new letters/words
                if len(morse_code_sequence) > 0:
                    last_blink_time = time.time()

    # Check for letter/word pauses
    if len(morse_code_sequence) > 0:
        elapsed_time = time.time() - last_blink_time

        if elapsed_time > WORD_PAUSE:
            # Convert Morse sequence to text
            morse_str = "".join(morse_code_sequence)
            decoded_message += MORSE_CODE_DICT.get(morse_str, "?") + " "
            morse_code_sequence = []  # Reset for next word
            print("Decoded Message:", decoded_message)

        elif elapsed_time > LETTER_PAUSE:
            # Convert Morse sequence to letter
            morse_str = "".join(morse_code_sequence)
            decoded_message += MORSE_CODE_DICT.get(morse_str, "?")
            morse_code_sequence = []  # Reset for next letter
            print("Decoded Message:", decoded_message)

    # Display the frame
    cv2.putText(frame, f"Message: {decoded_message}", (10, 50),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
    cv2.imshow("Morse Code Blink Detection", frame)

    # Break loop on 'q' press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
camera.release()
cv2.destroyAllWindows()
